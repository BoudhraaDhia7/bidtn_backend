{
    "openapi": "3.0.0",
    "info": {
        "title": "BID-TN API",
        "description": "This is BID-TN api documentation",
        "version": "1.0.0"
    },
    "paths": {
        "/api/user/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate a user.\n\nThis endpoint is responsible for authenticating a user based on the provided email and password.\nIt performs validation on the request data and, if successful, returns an authentication token\nalong with user details. This process can result in various responses depending on the outcome\nof the authentication attempt.",
                "description": "Authenticate a user",
                "operationId": "d21de429f5c27fa6153a09b34c19995f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@test.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Authenticated successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                }
            }
        },
        "/api/user/logout": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Invoke method for handling user logout.",
                "description": "Logout a user. This endpoint requires a Bearer token in the Authorization header.",
                "operationId": "620cdb0f7986cd9461006945a7f8efc8",
                "responses": {
                    "200": {
                        "description": "User logged out successfully"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                }
            }
        },
        "/api/user/refresh-token": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Authentication Token",
                "description": "Refresh the authentication token.\n\nThis endpoint is used to log out the user. It requires no parameters but a valid\nbearer token must be provided in the Authorization header. On success, it returns\nan HTTP 200 OK response with a message indicating successful logout.",
                "operationId": "refreshToken",
                "responses": {
                    "200": {
                        "description": "Authentication token refreshed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "The new authentication token.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Token is invalid or expired.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message explaining the reason for being unauthorized.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message explaining the internal server error.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/user/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register New User",
                "description": "Register a new user.\n\nThis endpoint is responsible for registering a new user based on the provided details in the request body.\nIt performs validation on the request data and, if successful, creates a new user account and returns an\nauthentication token along with user details. This process can result in various responses depending on the\noutcome of the registration attempt.",
                "operationId": "registerUser",
                "requestBody": {
                    "description": "User registration details with profile picture",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password",
                                    "first_name",
                                    "last_name"
                                ],
                                "properties": {
                                    "email": {
                                        "description": "User email address.",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "User password.",
                                        "type": "string"
                                    },
                                    "first_name": {
                                        "description": "User's first name.",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "User's last name.",
                                        "type": "string"
                                    },
                                    "profile_picture": {
                                        "description": "Profile picture file.",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User registered successfully. Authentication token refreshed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "The new authentication token.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity. Issues with user registration details."
                    },
                    "500": {
                        "description": "Internal server error or other unspecified error."
                    }
                }
            }
        },
        "/api/password/forgot": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Forgot Password",
                "description": "Initiates a password reset process for the user identified by their email. It sends a reset link to the provided email address.",
                "operationId": "82457539ed2e4031cc83a415252bd366",
                "requestBody": {
                    "description": "Email of the user requesting password reset",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "description": "User's email address",
                                        "type": "string",
                                        "format": "email"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset email sent successfully"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/user/{id}": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Get a user.\n\nThis endpoint is responsible for Getting a user based on the provided ID.\nIt performs validation on the request data and, if successful, returns an a user details.\nThis process can result in various responses depending on the outcome of the Getting user attempt.",
                "description": "Get a user",
                "operationId": "4a7a62f5a37e87f7d2064cd0c0e1ef6d",
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/api/password/reset/{token}": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Reset User Password.\n\nThis endpoint is responsible for resetting a user's password based on the provided token and new password details.\nIt performs validation on the request data and, if successful, updates the user's password.\nThis process can result in various responses depending on the outcome of the password reset attempt.",
                "description": "Resets a user's password using a provided token along with the new password and its confirmation.",
                "operationId": "ec91ebcfaae7766baef8673f4de29902",
                "requestBody": {
                    "description": "New password and its confirmation",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "password": {
                                        "description": "New password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "password_confirmation": {
                                        "description": "New password confirmation",
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/api/user/update/detail": {
            "patch": {
                "tags": [
                    "Auth"
                ],
                "summary": "Update Existing User",
                "description": "Update an existing user.\n\nThis endpoint is responsible for updating an existing user based on the provided details in the request body.\nIt performs validation on the request data and, if successful, updates the user account and optionally the profile picture,\nreturning a success message along with the updated user details. This process can result in various responses depending on the\noutcome of the update attempt.",
                "operationId": "updateUser",
                "requestBody": {
                    "description": "User update details with optional profile picture",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "User email address.",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "User password.",
                                        "type": "string"
                                    },
                                    "first_name": {
                                        "description": "User's first name.",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "User's last name.",
                                        "type": "string"
                                    },
                                    "profile_picture": {
                                        "description": "Profile picture file.",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Success message.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity. Issues with user update details."
                    },
                    "500": {
                        "description": "Internal server error or other unspecified error."
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    }
}